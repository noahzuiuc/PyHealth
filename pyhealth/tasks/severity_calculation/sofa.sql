-- THIS SCRIPT IS AUTOMATICALLY GENERATED. DO NOT EDIT IT DIRECTLY.

-- Drop the table if it exists (PostgreSQL syntax)
DROP TABLE IF EXISTS sofa;

-- Create the table using a Common Table Expression (CTE) based query
CREATE TABLE sofa AS
-- ------------------------------------------------------------------
-- Title: Sequential Organ Failure Assessment (SOFA)
-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).
-- This score is a measure of organ failure for patients in the ICU.
-- The score is calculated on the first day of each ICU patients' stay.
-- ------------------------------------------------------------------

-- Reference for SOFA:
--     Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De MendonÃ§a,
--     Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.
--     "The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure."
--     Intensive care medicine 22, no. 7 (1996): 707-710.

-- Variables used in SOFA:
--  GCS, MAP, FiO2, Ventilation status (sourced FROM chartevents)
--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced FROM labevents)
--  Dobutamine, Epinephrine, Norepinephrine (sourced FROM inputevents_mv and INPUTEVENTS_CV)
--  Urine output (sourced from OUTPUTEVENTS)

-- The following views/tables are required to run this query:
--  1) urine_output_first_day - generated by urine-output-first-day.sql
--  2) vitals_first_day - generated by vitals-first-day.sql
--  3) gcs_first_day - generated by gcs-first-day.sql
--  4) labs_first_day - generated by labs-first-day.sql
--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql
--  6) echo_data - generated by echo-data.sql (Note: Schema might differ depending on MIMIC version/how it was imported)
--  7) ventilation_durations - generated by ventilation_durations.sql

-- Note:
--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.
--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.
--  This script assumes the necessary tables (icustays, chartevents, etc.) and the prerequisite views exist in your PostgreSQL database.
--  You might need to add schema prefixes (e.g., mimiciii.icustays) depending on your setup.

WITH wt AS
(
  SELECT ie.icustay_id
    -- ensure weight is measured in kg
    , avg(CASE
        WHEN itemid IN (762, 763, 3723, 3580, 226512)
          THEN valuenum
        -- convert lbs to kgs
        WHEN itemid IN (3581)
          THEN valuenum * 0.45359237
        -- convert oz to kgs (1 oz = 0.0283495 kg) - Conversion corrected
        WHEN itemid IN (3582)
          THEN valuenum * 0.0283495231 -- Corrected conversion factor
        ELSE null
      END) AS weight

  FROM icustays ie
  LEFT JOIN chartevents c
    ON ie.icustay_id = c.icustay_id
  WHERE c.valuenum IS NOT NULL
  AND c.itemid IN
  (
    762, 763, 3723, 3580,                 -- Weight Kg
    3581,                                 -- Weight lb
    3582,                                 -- Weight oz
    226512                                -- Metavision: Admission Weight (Kg)
  )
  AND c.valuenum > 0 -- Ensure weight is positive
  -- Use PostgreSQL interval arithmetic
  AND c.charttime BETWEEN (ie.intime - INTERVAL '1 DAY') AND (ie.intime + INTERVAL '1 DAY')
  -- exclude rows marked as error
  AND (c.error IS NULL OR c.error = 0)
  GROUP BY ie.icustay_id
)
-- 5% of patients are missing a weight, but we can impute weight using their echo notes
-- Note: The echo_data table structure/availability might vary. Adjust join keys and column names if necessary.
, echo2 as(
  SELECT ie.icustay_id, avg(weight * 0.45359237) AS weight -- Assuming echo_data.weight is in lbs
  FROM icustays ie
  LEFT JOIN echo_data echo -- Make sure this table/view exists and the join columns are correct
    ON ie.hadm_id = echo.hadm_id -- Or appropriate join key
    -- Use PostgreSQL interval arithmetic
    AND echo.charttime > (ie.intime - INTERVAL '7 DAY')
    AND echo.charttime < (ie.intime + INTERVAL '1 DAY')
  WHERE echo.weight IS NOT NULL -- Check if weight column exists and is not null
  GROUP BY ie.icustay_id
)
, vaso_cv AS
(
  SELECT ie.icustay_id
    -- case statement determining whether the ITEMID is an instance of vasopressor usage
    -- Note: Ensure division by weight results in floating point, not integer division.
    -- PostgreSQL performs integer division if both operands are integers. Cast if necessary,
    -- though avg(weight) should produce a numeric type. COALESCE helps too.
    , max(CASE
            WHEN itemid = 30047 THEN rate / CAST(coalesce(wt.weight, ec.weight) AS NUMERIC) -- measured in mcgmin, converting to mcg/kg/min
            WHEN itemid = 30120 THEN rate -- measured in mcgkgmin ** Assuming original comment about potential errors is noted
            ELSE null
          END) AS rate_norepinephrine

    , max(CASE
            WHEN itemid = 30044 THEN rate / CAST(coalesce(wt.weight, ec.weight) AS NUMERIC) -- measured in mcgmin, converting to mcg/kg/min
            WHEN itemid IN (30119, 30309) THEN rate -- measured in mcgkgmin
            ELSE null
          END) AS rate_epinephrine

    , max(CASE WHEN itemid IN (30043, 30307) THEN rate END) AS rate_dopamine
    , max(CASE WHEN itemid IN (30042, 30306) THEN rate END) AS rate_dobutamine

  FROM icustays ie
  INNER JOIN inputevents_cv cv -- Make sure this table/view exists
    ON ie.icustay_id = cv.icustay_id AND cv.charttime BETWEEN ie.intime AND (ie.intime + INTERVAL '1 DAY') -- Use PostgreSQL interval arithmetic
  LEFT JOIN wt
    ON ie.icustay_id = wt.icustay_id
  LEFT JOIN echo2 ec
    ON ie.icustay_id = ec.icustay_id
  WHERE cv.itemid IN (30047, 30120, 30044, 30119, 30309, 30043, 30307, 30042, 30306)
  AND cv.rate IS NOT NULL
  GROUP BY ie.icustay_id
)
, vaso_mv AS
(
  SELECT ie.icustay_id
    -- case statement determining whether the ITEMID is an instance of vasopressor usage
    -- Ensure rate column here is mcg/kg/min as assumed by the SOFA score calculation later
    , max(CASE WHEN itemid = 221906 THEN rate END) AS rate_norepinephrine -- Vasopressin in MetaVision? Check units. Usually mcg/kg/min.
    , max(CASE WHEN itemid = 221289 THEN rate END) AS rate_epinephrine -- Epinephrine in MetaVision. Check units. Usually mcg/kg/min.
    , max(CASE WHEN itemid = 221662 THEN rate END) AS rate_dopamine -- Dopamine in MetaVision. Check units. Usually mcg/kg/min.
    , max(CASE WHEN itemid = 221653 THEN rate END) AS rate_dobutamine -- Dobutamine in MetaVision. Check units. Usually mcg/kg/min.
  FROM icustays ie
  INNER JOIN inputevents_mv mv -- Make sure this table/view exists
    ON ie.icustay_id = mv.icustay_id AND mv.starttime BETWEEN ie.intime AND (ie.intime + INTERVAL '1 DAY') -- Use PostgreSQL interval arithmetic
  WHERE mv.itemid IN (221906, 221289, 221662, 221653)
  -- 'Rewritten' orders are not delivered to the patient
  AND mv.statusdescription != 'Rewritten' -- Check if this column/value exists in your PostgreSQL schema
  AND mv.rate IS NOT NULL
  GROUP BY ie.icustay_id
)
-- pafi1: Intermediate step for PaO2/FiO2 calculation linking blood gas results with ventilation status
, pafi1 AS
(
  -- join blood gas to ventilation durations to determine if patient was vent
  SELECT bg.icustay_id, bg.charttime
  , bg.pao2fio2 -- Assuming this column exists in blood_gas_first_day_arterial
  , CASE WHEN vd.icustay_id IS NOT NULL THEN 1 ELSE 0 END AS isvent
  FROM blood_gas_first_day_arterial bg -- Make sure this view/table exists
  LEFT JOIN ventilation_durations vd -- Make sure this view/table exists
    ON bg.icustay_id = vd.icustay_id
    AND bg.charttime >= vd.starttime -- Use standard comparison operators
    AND bg.charttime <= vd.endtime
  -- ORDER BY is not strictly necessary inside a CTE unless using LIMIT, but kept for clarity if debugging
  -- ORDER BY bg.icustay_id, bg.charttime
)
-- pafi2: Calculate minimum PaO2/FiO2 separately for ventilated and non-ventilated periods
, pafi2 AS
(
  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score
  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120
  -- in this case, the SOFA score is 3, *not* 4.
  SELECT icustay_id
  , min(CASE WHEN isvent = 0 THEN pao2fio2 ELSE NULL END) AS pao2fio2_novent_min
  , min(CASE WHEN isvent = 1 THEN pao2fio2 ELSE NULL END) AS pao2fio2_vent_min
  FROM pafi1
  GROUP BY icustay_id
)
-- scorecomp: Aggregate all necessary components for the SOFA score calculation
, scorecomp AS
(
  SELECT ie.icustay_id
  , v.meanbp_min -- From vitals_first_day
  , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) AS rate_norepinephrine
  , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) AS rate_epinephrine
  , coalesce(cv.rate_dopamine, mv.rate_dopamine) AS rate_dopamine
  , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) AS rate_dobutamine

  , l.creatinine_max -- From labs_first_day
  , l.bilirubin_max -- From labs_first_day
  , l.platelet_min -- From labs_first_day

  , pf.pao2fio2_novent_min
  , pf.pao2fio2_vent_min

  , uo.urineoutput -- From urine_output_first_day

  , gcs.mingcs -- From gcs_first_day

  FROM icustays ie
  LEFT JOIN vaso_cv cv
    ON ie.icustay_id = cv.icustay_id
  LEFT JOIN vaso_mv mv
    ON ie.icustay_id = mv.icustay_id
  LEFT JOIN pafi2 pf
    ON ie.icustay_id = pf.icustay_id
  LEFT JOIN vitals_first_day v -- Make sure this view/table exists
    ON ie.icustay_id = v.icustay_id
  LEFT JOIN labs_first_day l -- Make sure this view/table exists
    ON ie.icustay_id = l.icustay_id
  LEFT JOIN urine_output_first_day uo -- Make sure this view/table exists
    ON ie.icustay_id = uo.icustay_id
  LEFT JOIN gcs_first_day gcs -- Make sure this view/table exists
    ON ie.icustay_id = gcs.icustay_id
)
-- scorecalc: Calculate individual component scores based on the aggregated data
, scorecalc AS
(
  -- Calculate the final score
  -- note that if the underlying data is missing, the component is null
  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging
  SELECT icustay_id
  -- Respiration Score
  , CASE
      WHEN pao2fio2_vent_min   < 100 THEN 4
      WHEN pao2fio2_vent_min   < 200 THEN 3
      WHEN pao2fio2_novent_min < 300 THEN 2
      WHEN pao2fio2_novent_min < 400 THEN 1
      WHEN coalesce(pao2fio2_vent_min, pao2fio2_novent_min) IS NULL THEN NULL -- Keep null if no data
      ELSE 0
    END AS respiration

  -- Coagulation Score
  , CASE
      WHEN platelet_min < 20  THEN 4
      WHEN platelet_min < 50  THEN 3
      WHEN platelet_min < 100 THEN 2
      WHEN platelet_min < 150 THEN 1
      WHEN platelet_min IS NULL THEN NULL -- Keep null if no data
      ELSE 0
    END AS coagulation

  -- Liver Score
  , CASE
      -- Bilirubin checks in mg/dL
      WHEN bilirubin_max >= 12.0 THEN 4
      WHEN bilirubin_max >= 6.0  THEN 3
      WHEN bilirubin_max >= 2.0  THEN 2
      WHEN bilirubin_max >= 1.2  THEN 1
      WHEN bilirubin_max IS NULL THEN NULL -- Keep null if no data
      ELSE 0
    END AS liver

  -- Cardiovascular Score
  -- Note: Check units for vaso rates (mcg/kg/min). Dobutamine is used regardless of dose.
  , CASE
      WHEN rate_dopamine > 15 OR rate_epinephrine > 0.1 OR rate_norepinephrine > 0.1 THEN 4
      WHEN rate_dopamine > 5  OR (rate_epinephrine > 0 AND rate_epinephrine <= 0.1) OR (rate_norepinephrine > 0 AND rate_norepinephrine <= 0.1) THEN 3 -- Corrected logic slightly for vaso <= 0.1
      WHEN rate_dopamine > 0  OR rate_dobutamine > 0 THEN 2
      WHEN meanbp_min < 70 THEN 1
      -- Ensure component is null only if all related inputs are null
      WHEN coalesce(meanbp_min::text, rate_dopamine::text, rate_dobutamine::text, rate_epinephrine::text, rate_norepinephrine::text) IS NULL THEN NULL
      ELSE 0
    END AS cardiovascular


  -- Neurological Score (GCS)
  , CASE
      WHEN mingcs < 6 THEN 4
      WHEN mingcs >= 6  AND mingcs <= 9  THEN 3
      WHEN mingcs >= 10 AND mingcs <= 12 THEN 2
      WHEN mingcs >= 13 AND mingcs <= 14 THEN 1
      WHEN mingcs = 15 THEN 0 -- Explicitly score 0 for GCS 15
      WHEN mingcs IS NULL THEN NULL -- Keep null if no data
      ELSE 0 -- Should not happen if mingcs is not null, but safe default
    END AS cns

  -- Renal Score
  , CASE
      -- Creatinine checks in mg/dL, Urine Output in mL/day
      WHEN creatinine_max >= 5.0 THEN 4
      WHEN urineoutput < 200 THEN 4 -- Dominates score if UO is very low
      WHEN creatinine_max >= 3.5 AND creatinine_max < 5.0 THEN 3
      WHEN urineoutput < 500 THEN 3 -- Dominates score if UO is low
      WHEN creatinine_max >= 2.0 AND creatinine_max < 3.5 THEN 2
      WHEN creatinine_max >= 1.2 AND creatinine_max < 2.0 THEN 1
      WHEN coalesce(urineoutput::text, creatinine_max::text) IS NULL THEN NULL -- Keep null if no data
      ELSE 0
    END AS renal
  FROM scorecomp
)
-- Final Select: Join calculated scores back to icustays and calculate total SOFA
SELECT ie.subject_id, ie.hadm_id, ie.icustay_id
  -- Combine all the scores to get SOFA
  -- Impute 0 if the component score is missing (NULL)
  , coalesce(s.respiration, 0)
  + coalesce(s.coagulation, 0)
  + coalesce(s.liver, 0)
  + coalesce(s.cardiovascular, 0)
  + coalesce(s.cns, 0)
  + coalesce(s.renal, 0)
  AS sofa_score -- Renamed to avoid conflict with table name 'sofa'

-- Include individual component scores for inspection
, s.respiration
, s.coagulation
, s.liver
, s.cardiovascular
, s.cns
, s.renal
FROM icustays ie
LEFT JOIN scorecalc s
  ON ie.icustay_id = s.icustay_id
ORDER BY ie.icustay_id;